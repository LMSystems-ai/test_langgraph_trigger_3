"""
Implementation of test_langgraph_trigger
Generated by LangGraph Generator v
"""

from langchain.agents import AgentExecutor
from langgraph.graph import StateGraph
from langgraph.graph import END, START

# Import state
from state import State

# Import nodes
from nodes.first_node import first_node
from nodes.second_node import second_node
from nodes.decision_node import decision_node

# Import stub
from stub import test_langgraph_trigger




def routing_function(state: State) -> str:
    '''
    Routing function for conditional edge

    Args:
        state: The current state of the graph

    Returns:
        The path to follow. One of: path_a, path_b
    '''
    # TODO: Implement routing logic
    return "path_a"  # Default to first path


def build_agent():
    """Build the agent."""
    graph = StateGraph(State)

    # Add nodes from implementation
    graph.add_node("first_node", first_node)
    graph.add_node("second_node", second_node)
    graph.add_node("decision_node", decision_node)

    # Add edges
    graph.add_edge("first_node", "second_node")
    graph.add_edge("second_node", "decision_node")
    graph.add_conditional_edges(
        "decision_node",
        routing_function,
        {
            "path_a": "path_a_node",
            "path_b": "path_b_node",
        }
    )

    app = graph.compile()
    return app


compiled_agent = build_agent()


if __name__ == "__main__":
    graph_agent = test_langgraph_trigger(build_agent)
    # Call the agent
    graph_agent.invoke({"input": "Hello, world!"})
